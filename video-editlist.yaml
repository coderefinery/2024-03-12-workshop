- workshop_title: CodeRefinery 2024 Mar
- workshop_description: >
    This is part of the CodeRefinery March 2024 workshop.  The videos
    are available to everyone, but may be most useful to the people
    who attended the workshop and want to review later.  In this
    workshop, week 1 was redesigned and day 1 starts with concepts in
    the GitHub web interface, and days 2-3 move to local work.

    Playlist: https://www.youtube.com/playlist?list=PLpLblYHCzJADIsbUhXSrC0qW5wDsH-F9U

    Workshop webpage: https://coderefinery.github.io/2024-03-12-workshop/

    CodeRefinery: https://coderefinery.org/

# This input will be used for all segments until redefined
- input: day1-obs.mkv


# Preview icebreaker
- output: day1-icebreaker.mkv
  title: 1.1 Icebreaker
  description: >-
    The pre-start discussion and icebreakers.  You probably want to go
    on to the next video.
  time:
    - start: 00:14:20
    - end: 00:19:32


# Intro
- output: day1-intro.mkv
  title: 1.2 Intro
  description: >
    The introduction to this workshop, explaining general mechanics
    and what CodeRefinery is.

    https://github.com/coderefinery/workshop-intro/blob/master/livestream.md
  time:
     #- input: CR_LOGO_30p.mkv
     #- start: 00:00
     #- stop: 00:06
     - input: day1-obs.mkv
     - start: 00:19:32
     - stop: 00:39:29
     #- input: CR_LOGO_30p.mkv
     #- start: 00:00
     #- stop: 00:06

# Git-intro day 1
- output: day1-git-intro-1.mkv
  title: 1.3 Git Intro (day 1)
  description: >
    Here, we go over the basics of git from first principles, using
    the GitHub web interface.  First, we talk about basic motivation
    about why version control.  Then, we use the GitHub web interface
    to understand the basics of history, branches, commits, and
    merges, conflict resolution (online), and how everything fits
    together.  This isn't how normal work would happen, but it's a
    much easier starting point.  Part 2 (on day 2) goes to local work
    using all the same concepts we learned today.

    Multi-user work and remotes is the next lesson, git-collaborative,
    on day 3.

    There are two external videos which are excluded from this
    recording.  You can find the link to them in the table of contents
    below.

    https://coderefinery.github.io/git-intro/

  time:
    #- input: CR_LOGO_30p.mov
    #- start: 00:00
    #- stop: 00:06
    - input: day1-obs.mkv
    - start: 00:40:39
    - -: Overview of the day
    - 00:42:45: '# Motivation to version control'
    - 00:55:21: '# Basics (creating repo, adding, committing, etc.)'
    - 00:58:25: Initial configuration of git
    - stop: 01:13:20
    - start: 01:24:19
    - -: "Exercise: recording changes"
    - stop: 01:28:14
    - start: 01:47:34
    - -: Going over the exercise
    - 01:49:55: Git history and git log
    - 01:54:32: Writing good commit messages
    - 01:58:52: Ignoring files with .gitignore
    - 02:00:48: Summary of basics
    - 02:02:46: Optional and extra exercises
    - stop: 02:04:53
    - start: 03:18:46
    - -: "Q&A after the break"
    - 03:22:32: '# Branching and merging'
    - 03:28:24: '"git graph" alias'
    - 03:31:47: Creating and working with branches
    - 03:38:49: "Exercise: create and commit to branches"
    - stop: 03:41:20
    - start: 04:01:35
    - -: Quickly looking at the exercise
    - 04:03:19: Merging branches
    - 04:05:49: Deleting branches
    #- 02:51:36: Tags
    - 04:07:07: "Q&A"
    - stop: 04:15:30
    - start: 04:26:14
    - -: '# Conflict resolution'
    - 04:30:50: Preparing a sample conflict to resolve
    - 04:34:52: Merging conflicting changes
    - 04:36:28: Resolving the conflict
    - 04:44:02: 'Q&A'
    - stop: 04:51:20




# Day 2
- input: day2-obs.mkv


- output: day2-icebreaker.mkv
  title: 2.1 Day 2 icebreaker
  description: >
    The quick introduction to Day 2 and recap from Day 1.
  time:
    #- input: CR_LOGO_30p.mkv
    #- start: 00:00
    #- stop: 00:06
    - input: day2-obs.mkv
    - start: 00:13:44
    - 00:14:31: Icebreaker questions
    - 00:18:41: git tags
    - 00:20:43: Local vs remote
    - stop: 00:24:03
    #- input: CR_LOGO_30p.mkv
    #- start: 00:00
    #- stop: 00:06

# Git-intro day 2
- output: day2-git-intro-2.mkv
  title: 2.2 Git Intro day 2
  description: >
    Part 2 of the previous video: https://www.youtube.com/watch?v=e2GGBtlZW8o&list=PLpLblYHCzJADyLxv8GRyxFiRJBhQ-G0NQ&index=4

    Here, we go over the basics of git from first principles, though
    this is not the most basic course you can find.  Previous video:
    We covered basics, motivation, making commits, merging, and
    staging.  This part 2 video goes into conflict resolution, remotes
    and basics of
    sharing repositories online, inspecting history, undoing and
    recovering, and some practical advice.  However, this does not
    cover multi-user work or remotes (that is the next lesson,
    git-collaborative).

    https://coderefinery.github.io/git-intro/

  time:
    #- input: CR_LOGO_30p.mov
    #- start: 00:00
    #- stop: 00:06
    - input: day2-obs.mkv
    - start: 00:28:39
    - 00:30:11: § Sharing repositories online
    - 00:41:44: "Exercise: push recipe to Github. (around here)"
    - stop: 00:44:52
    - start: 01:08:05
    - -: Demo and Questions from exercise
    - stop: 01:15:53
    - start: 01:26:46
    - -: 'Q&A'
    - 01:30:28: § Inspecting history
    - 01:42:44: "Exercise: inspecting history"
    - stop: 01:46:20
    - start: 02:16:31
    - -: Wrap-up of inspecting history, summary, Q&A
    - stop: 02:24:03
    - start: 03:21:58
    - -: After break discussion
    - 03:23:20: § Undoing and recovering
    - 03:38:15: "Exercises: undoing and recovering"
    - stop: 03:39:07
    - start: 04:04:29
    - -: Going over the exercises
    #- 03:01:48: "Summary of the lessons not covered: staging, git under the hood, and configuration"
    - stop: 04:16:19
    - start: 04:26:59
    - -: "§ Practical advice: how much git is necessary?, and general Q&A of last two days"
    #- 03:42:54: Important preparation for tomorrow
    #- cover: {begin: "03:50:33", end: "03:51:51", w: 840, h: 1080}
    #- 03:52:00: Feedback and other comments, day 2
    - stop: 004:55:56
    #- input: CR_LOGO_30p.mov
    #- start: 00:00
    #- stop: 00:06

- output: day2-bisect.mkv
  title: 2.3 Bisection exercise
  description: >
    Demonstration of git-bisect from the "Inspecting history"
    exercise.  Discussion + demo of the exercise.  We didn't do this
    in the main exercise.

    https://coderefinery.github.io/git-intro/archaeology/#finding-out-when-something-broke-changed-with-git-bisect

  time:
    - input: day2-obs.mkv
    - start: 04:56:13
    - -: What is git bisect?
    - 04:57:30: CATS
    - 05:00:26: § Starting the exercise
    - 05:02:03: § Bisecting manually
    - 05:08:59: Finding the bad commit, discussion
    - 05:11:32: § Bisecting with a script, figuring out how to test automatically
    - 05:15:45: Making the script
    - 05:16:32: Running the script
    - 05:18:13: § Final discussion
    - stop: 05:19:41



## Day 3
- input: day3-obs.mkv

- output: day3-icebreaker.mkv
  title: 3.1 Day 3 icebreaker
  description: >
    The icebreaker of day 3.  We have a guest who prepares for us by
    discussing about their experience with the MNE project and how has
    collaboration with many people using the things we will learn
    about today.
  time:
    - start: 00:16:55
    - stop: 00:21:50



- output: day3-git-collab.mkv
  title: 3.2 Git collaborative
  description: >
      Today, we expand from using git by yourself to using it in a
      team.  We use Github, centralized workflows, forking on Github,
      pull requests, code review, commenting on pull requests,
      practical advice on using Git and version control in real projects,
      contributing to other projects, and more.

      https://coderefinery.org/git-collaborative/
  time:
    - start: 00:21:55
    - -: Some initial discussion
    - 00:30:14: Starting off, basic prerequisites
    - 00:39:28: § Concepts around collaboration
    - 00:58:01: § Centralized workflow
    - 01:05:54: stop   # ERROR: wrong syntax
    - 01:16:11: start
    - 01:16:11: "Exercise Centralized-1"
    - stop: 01:24:58
    - start: 01:54:37
    - -: "Exercise Centralized-2: reviewing and merging the pull request"
    - cover: {begin: 02:13:15, end: 02:13:24}  # some window on screen
    - stop: 02:22:07
    - start: 03:19:43
    - -: § Distributed version control and forking workflow
    - 03:28:47: Preparation for "Exercise Distributed-1"
    - stop: 03:37:02
    - start: 04:16:59
    - -: Merging, going over the exercise
    - 04:39:10: § How to contribute changes to someone else's project
    - 04:49:53: "More general Q&A"
    - 04:57:33: Final words
    - 04:58:11: Preparation for week 2
    - stop: 05:00:28


## Day 4
- input: day4-obs.mkv

- output: day4-icebreaker.mkv
  title: 4.1 Second week icebreaker  # /introduction
#  description: >
#    The introduction to the second week, where we go into slightly
#    more detail bout what we will cover this week and how it fits
#    together.  There is also a guest to give us an introduction of
#    reproducible research and social coding, which are the topics of
#    today.
#
#    In short, if last week was about tracking code, this week is about
#    managing software.
  description: >-
    The random icebreaking discussion for day 4
  time:
    - start: 00:04:34
    #- -: Guest talking about reproducibility and science
    #- 00:27:35: Introduction to week 2
    - end: 00:12:30


- output: day4-reproducible-research.mkv
  title: 4.2 Reproducible Research
  description: >
    If you can't get your code to do the same thing again, is it
    really science?  Or more practically, are you able to do your
    work?  Reproducibilty is a big deal, but we don't always learn how
    to do it.  In this lesson, we cover the basics, how to organize
    projects, record computational steps with Snakemake or other
    workflow managers, how to record environments with conda (and docker
    a bit), and sharing code and data (FAIR).

    https://coderefinery.github.io/reproducible-research/

  time:
    - start: 00:12:30
    - 00:13:56: "Introduction: how the whole workshop connects"
    - 00:18:06: Motivation
    - 00:33:34: Organizing projects

    - 00:41:16: Recording computational steps
    - 00:45:55: "Exercise: Snakemake"
    - stop: 00:51:11
    - start: 01:21:58
    - -: Q&A after exercise
    - 01:27:30: Recording dependencies
    - 01:33:15: "Exercise: explore dependency management in conda/Python/R/Matlab"
    - 01:43:18: Recording environments (containers)
    - 01:52:54: "Exercise: Container"
    - stop: 01:56:25
    - start: 02:12:08
    - -: Discussion after exercise
    - 02:13:50: Where do you go from here?  Practical advice
    - stop: 02:18:07

    #- 02:37:41: Sharing code and data
    #- 02:39:55: Demonstration of Zenodo
    #- stop: 02:49:58

- output: day4-social-coding.mkv
  title: 4.3 Social coding
  description: >
    We don't just program for ourselves: we are part of a community.
    As scientists, we want to get citations, so how can our software
    support this?  Our work is a constant balance between using the
    work of others and hoping that others will use our work.  In this
    lesson, we talk about the advantages and disadvantages of others
    building on our work, and how to support that.

    We cover best practices for software/data projects, requirements
    for sharing, copyright, licensing, citation, and more.

    https://coderefinery.github.io/social-coding/
  time:
    - start: 03:12:31
    - -: Intros
    - 03:14:29: Intro to the lesson
    - 03:20:04: Social Coding
    - 03:21:27: Initial questions
    - 03:43:31: Software licensing
    - stop: 04:07:26
    - start: 04:18:05
    - -: Further Q&A after break

    - 04:27:35: Software citation
    - 04:36:02: Sharing data
    - 04:38:44: Feedback of the day
    - stop: 04:43:54


####- output: day4-outro.mkv
####  title: 4.3 Day 4 final remarks
####  description: >
####    ...
####  time:
####    - 3:38:30, 3:39:42
####
###
### Day 5
- input: day5-obs.mkv

- output: day5-intro.mkv
  title: 5.1 Day 5 icebreakers
  description: >
    The random icebreaking discussion for day 5.
  time:
    - start: 00:10:03
    - stop: 00:18:27

- output: day5-documentation.mkv
  title: 5.2 Documentation
  description: >
    In this lesson we discuss different solutions for implementing and
    deploying code documentation. We start by creating a wishlist for
    how we would code documentation like to be. Then after a tour of
    available tools, we discuss how to write useful and accessible
    READMEs, and then we progress by demonstrating and practicing the
    Sphinx documentation generator and demonstrate how to deploy
    documentation to Read the Docs service.

    Topics and tools discussed: Markdown, reStructured text, README
    documentation, table of contents generation, Sphinx, Read the
    Docs, GitHub/GitLab pages.

    https://coderefinery.github.io/documentation/
  time:
    - start: 00:18:27
    - -: Introduction to topics
    - 20:51: Throwback to yesterday
    - 24:54: Motivation and wishlist
    - 29:01: Quick overview of optional lessons
    - 30:36: README files
    - 32:12: "Exercise: Readme files"
    - stop: 36:50
    - start: 58:06
    - -: Discussion after exercise
    - 01:03:10: Sphinx and Markdown intro
    - 01:08:12: Sphinx Typealong starts
    - stop: 01:19:18
    - start: 01:30:00
    - -: "Exercise: more Sphinx things"
    - stop: 01:31:48
    - start: 01:57:51
    - -: Post-exercise discussion
    - 02:01:15: 'Deploying Sphinx to GitHub Pages (Demo)'
    - 02:11:03: Hosting websites/homepages on GitHub Pages
    - 02:12:51: Summary
    - stop: 02:18:10

- output: day5-jupyter.mkv
  title: 5.3 Jupyter
  description: >
    This lesson teachs learners the user interface of JupyterLab, how
    Jupyter notebooks work, and what some common and powerful usecases
    are. Our focus is to demonstrate and discuss and guide towards
    good practices for reproducibility, collaboration, and
    reusability. The emphasis of this lesson is to demonstrate how to
    use notebooks in combination with version control and how to share
    reproducible notebooks via Binder.

    This lesson demonstrates the use of JupyterLab, nbdime,
    jupyterlab-git, and Binder.

    https://coderefinery.github.io/jupyter/
  time:
    - start: 03:18:08
    - -: Intro
    - 03:19:08: Introduction to Jupyter
    - 03:25:49: "Demo: Starting Jupyter Lab"
    - 03:32:12: Continuing with Jupyter lesson
    - 03:39:17: First Computational Notebook and Exercise
    - stop: 03:42:08
    - start: 04:02:46
    - 04:03:20: "Demo: version control in Jupyter"
    - stop: 04:14:10
    - start: 04:25:12
    - -: Sharing notebooks and Binder exercise
    - stop: 04:29:16
    - start: 04:47:45
    - -: Summary
    - stop: 04:53:04
#
###- output: day5-outro.mkv
###  title: 5.3 Day 5 outro
###  description: >-
###    Conclusion of day 5 and expectations for day 6.
###  time:
###    - start: 03:45:28
###    - stop: 03:46:23
#
#
#
- input: day6-obs.mkv

- output: day6-intro.mkv
  title: 6.1 Day 6 icebreakers and intro
  description: >
    The random icebreaking discussion, as well as quick introduction to Day 6.
  time:
    - start: 00:08:17
    - end: 00:21:12



- output: day6-testing.mkv
  title: 6.2 Software Testing
  description: >
    Software testing is a fundamental part of modern software
    development, and especially important for science since results
    should be correct.  Luckily, it's not so hard to get started, and
    anyone can do it. This is a crash course for scientists to get
    started testing their software.

    Tools covered include concepts of testing for science, unit
    testing, pytest, continuous integration, and GitHub actions.  We
    make demos in Python, but have examples in other languages and
    this will apply to every language in some form.

    https://coderefinery.github.io/testing/

  editlist:
    - start: 00:21:12
    - -: Structure of the lesson
    - 00:22:44: Motivation
    - 00:34:50: Concepts
    - 00:37:48: Testing locally (with exercise)
    - stop: 00:40:39
    - start: 00:57:35
    - 00:57:56: Automated testing and continuous integration with Github Actions
    - 01:13:10: Real example of automated tests
    - stop: 01:19:57
    - start: 01:30:29
    - -: "Test design exercises and Q&A"
    - stop: 01:42:23
    - start: 02:02:31
    - -: "Going through exercises and final Q&A"
    - 02:10:57: Conclusions and recommendations
    - stop: 02:16:37


- output: day6-modular-code-development.mkv
  title: 6.3 Modular Code Development
  description: >
    In this live-coding demo session we take a Python script as
    starting point which reads data, computes simple statistics, and
    generates a plot. Together we then improve this code based on
    suggestions from the audience to arrive at a more reusable code
    with reusable components. We start in the Jupyter notebook, later
    move to a Python script/module, introduce testing, and finally
    introduce and motivate a command line interface to our code.

    In this demonstration we use JupyterLab, Python, Pandas,
    Matplotlib, pytest, and Click.  It is also a great demonstration
    of pair programming.

    https://coderefinery.github.io/modular-type-along/
  time:
    - start: 03:18:27
    - -: Introduction to the lesson
    - 03:21:37: Learning outcomes
    - 03:22:25: Starting questions discussion
    - 03:27:30: "Demo begins: introduction to our task"
    - 03:30:25: Starting in a Jupyter notebook
    - 03:36:54: "Debugging the first bug: empty plot files"
    - 03:39:27: Splitting up into smaller functions
    - 03:45:44: Improving readability
    - 03:50:00: Rewriting functions to improve reusability
    - 03:55:14: Moving to scripts
    - 04:00:34: Creating git repository for the project
    - 04:03:39: Adding a test
    - 04:07:39: "Improving reproducibility: creating requirements.txt"
    - stop: 04:10:54
    - start: 04:22:39
    - -: Looking at new suggestions
    - 04:23:32: Moving functions to separate scripts
    - 04:28:58: Command line interface using click
    - 04:39:03: Benefits of a command line interface
    - 04:40:25: "Looking at remaining suggestions and Q&A"
    - 04:45:19: "Bonus demo: git from vscode"
    - stop: 04:48:45

- output: day6-outro.mkv
  title: 6.4 Workshop outro
  description: >
      The concluding remarks of the workshop.

      Outro presentation (will be updated in the future):
      https://github.com/coderefinery/workshop-outro/blob/master/README.md

  time:
    - start: 04:48:53
    - -: Concluding remarks and where to go.
    - 04:53:49: Upcoming courses we would like to highlight
    - 04:56:44: "If you want to help / join CodeRefinery"
    - 05:00:46: Final feedback and Q&A
    - 05:08:14: Outro music show
    - stop: 05:12:20
